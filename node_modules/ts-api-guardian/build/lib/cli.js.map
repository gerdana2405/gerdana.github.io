{"version":3,"sources":["cli.ts"],"names":[],"mappings":"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","file":"cli.js","sourcesContent":["import * as chalk from 'chalk';\nimport * as minimist from 'minimist';\nimport {ParsedArgs} from 'minimist';\nimport * as path from 'path';\n\nimport {SerializationOptions, generateGoldenFile, verifyAgainstGoldenFile} from './main';\n\n// Examples:\n//\n// ```sh\n// # Generate one declaration file\n// ts-api-guardian --out api_guard.d.ts index.d.ts\n//\n// # Generate multiple declaration files // # (output location like typescript)\n// ts-api-guardian --outDir api_guard [--rootDir .] core/index.d.ts core/testing.d.ts\n//\n// # Print usage\n// ts-api-guardian --help\n//\n// # Check against one declaration file\n// ts-api-guardian --verify api_guard.d.ts index.d.ts\n//\n// # Check against multiple declaration files\n// ts-api-guardian --verifyDir api_guard [--rootDir .] core/index.d.ts core/testing.d.ts\n// ```\n\nconst CMD = 'ts-api-guardian';\n\nexport function startCli() {\n  const {argv, mode, errors} = parseArguments(process.argv.slice(2));\n\n  const options: SerializationOptions = {\n    stripExportPattern: argv['stripExportPattern'],\n    allowModuleIdentifiers: [].concat(argv['allowModuleIdentifiers']),\n    onStabilityMissing: argv['onStabilityMissing'] || 'none'\n  };\n\n  if (['warn', 'error', 'none'].indexOf(options.onStabilityMissing) < 0) {\n    throw new Error(\n        'Argument for \"--onStabilityMissing\" option must be one of: \"warn\", \"error\", \"none\"');\n  }\n\n  for (const error of errors) {\n    console.warn(error);\n  }\n\n  if (mode === 'help') {\n    printUsageAndExit(!!errors.length);\n  } else {\n    const targets = generateFileNamePairs(argv, mode);\n\n    if (mode === 'out') {\n      for (const {entrypoint, goldenFile} of targets) {\n        generateGoldenFile(entrypoint, goldenFile, options);\n      }\n    } else {  // mode === 'verify'\n      let hasDiff = false;\n\n      for (const {entrypoint, goldenFile} of targets) {\n        const diff = verifyAgainstGoldenFile(entrypoint, goldenFile, options);\n        if (diff) {\n          hasDiff = true;\n          const lines = diff.split('\\n');\n          if (lines.length) {\n            lines.pop();  // Remove trailing newline\n          }\n          for (const line of lines) {\n            const chalkMap = {'-': chalk.red, '+': chalk.green, '@': chalk.cyan};\n            const chalkFunc = chalkMap[line[0]] || chalk.reset;\n            console.log(chalkFunc(line));\n          }\n        }\n      }\n\n      if (hasDiff) {\n        process.exit(1);\n      }\n    }\n  }\n}\n\nexport function parseArguments(input: string[]):\n    {argv: ParsedArgs, mode: string, errors?: string[]} {\n  let help = false;\n  const errors = [];\n\n  const argv = minimist(input, {\n    string: [\n      'out', 'outDir', 'verify', 'verifyDir', 'rootDir', 'stripExportPattern',\n      'allowModuleIdentifiers', 'onStabilityMissing'\n    ],\n    boolean: [\n      'help',\n      // Options used by chalk automagically\n      'color', 'no-color'\n    ],\n    alias: {'outFile': 'out', 'verifyFile': 'verify'},\n    unknown: option => {\n      if (option[0] === '-') {\n        errors.push(`Unknown option: ${option}`);\n        help = true;\n        return false;  // do not add to argv._\n      } else {\n        return true;  // add to argv._\n      }\n    }\n  });\n\n  help = help || argv['help'];\n\n  if (help) {\n    return {argv, mode: 'help', errors};\n  }\n\n  let modes: string[] = [];\n\n  if (argv['out']) {\n    modes.push('out');\n  }\n  if (argv['outDir']) {\n    modes.push('out');\n  }\n  if (argv['verify']) {\n    modes.push('verify');\n  }\n  if (argv['verifyDir']) {\n    modes.push('verify');\n  }\n\n  if (!argv._.length) {\n    errors.push('No input file specified.');\n    modes = ['help'];\n  } else if (modes.length !== 1) {\n    errors.push('Specify either --out[Dir] or --verify[Dir]');\n    modes = ['help'];\n  } else if (argv._.length > 1 && !argv['outDir'] && !argv['verifyDir']) {\n    errors.push(`More than one input specified. Use --${modes[0]}Dir instead.`);\n    modes = ['help'];\n  }\n\n  return {argv, mode: modes[0], errors};\n}\n\nfunction printUsageAndExit(error = false) {\n  const print = error ? console.warn.bind(console) : console.log.bind(console);\n  print(`Usage:  ${CMD} [options] <file ...>\n        ${CMD} --out <output file> <entrypoint .d.ts file>\n        ${CMD} --outDir <output dir> [--rootDir .] <entrypoint .d.ts files>\n\n        ${CMD} --verify <golden file> <entrypoint .d.ts file>\n        ${CMD} --verifyDir <golden file dir> [--rootDir .] <entrypoint .d.ts files>\n\nOptions:\n        --help                          Show this usage message\n\n        --out <file>                    Write golden output to file\n        --outDir <dir>                  Write golden file structure to directory\n\n        --verify <file>                 Read golden input from file\n        --verifyDir <dir>               Read golden file structure from directory\n\n        --rootDir <dir>                 Specify the root directory of input files\n\n        --stripExportPattern <regexp>   Do not output exports matching the pattern\n        --allowModuleIdentifiers <identifier>\n                                        Whitelist identifier for \"* as foo\" imports\n        --onStabilityMissing <warn|error|none>\n                                        Warn or error if an export has no stability\n                                        annotation`);\n  process.exit(error ? 1 : 0);\n}\n\nexport function generateFileNamePairs(\n    argv: ParsedArgs, mode: string): {entrypoint: string, goldenFile: string}[] {\n  if (argv[mode]) {\n    return [{entrypoint: argv._[0], goldenFile: argv[mode]}];\n\n  } else {  // argv[mode + 'Dir']\n    let rootDir = argv['rootDir'] || '.';\n    const goldenDir = argv[mode + 'Dir'];\n\n    return argv._.map(fileName => {\n      return {\n        entrypoint: fileName,\n        goldenFile: path.join(goldenDir, path.relative(rootDir, fileName))\n      };\n    });\n  }\n}\n"]}